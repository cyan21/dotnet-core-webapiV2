# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables:
- name: JFROG_CLI_BUILD_NUMBER
  value: $(Build.BuildNumber)
- name: JFROG_CLI_LOG_LEVEL
  value: INFO 
- name: JFROG_CLI_TEMP_DIR
  value: /home/vsts/work/_temp
- name: jfrogCliVersion
  value: 2.72.2
- name: JFROG_CLI_BUILD_URL
  value: "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)" 
- name: RUN_JOB
  value: true
pool:
  vmImage: ubuntu-latest

jobs:
- job: dotnet_lib
  variables: 
    JFROG_CLI_BUILD_NAME : dotnet-lib
  condition: eq(variables.RUN_JOB, false)
  steps:  
  - task: CmdLine@2
    inputs:
      script: |
        echo ${JFROG_CLI_BUILD_NUMBER}
        env | grep JFROG 
        ls -l ${AGENT_TEMPDIRECTORY}
        ls -l ${JFROG_CLI_TEMP_DIR}
        ls -l ${SYSTEM_DEFAULTWORKINGDIRECTORY}
        pwd
        ls -l 
        dotnet -h
    displayName: test

  - task: JfrogCliV2@1
    inputs:
      jfrogPlatformConnection: 'psemea'
      useCustomVersion: true
      cliVersion: '$(jfrogCliVersion)'
      command: |
        jf dotnetc --repo-resolve ps-nuget
        jf dotnet restore MyLib/greeting --module=dotnet --build-name $(JFROG_CLI_BUILD_NAME) --build-number $(Build.BuildNumber)
        jf audit --working-dirs MyLib
    displayName: Audit

  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: 'MyLib'
      arguments: '-c Release'
    displayName: Dotnet Build

  - task: JfrogCliV2@1
    inputs:
      jfrogPlatformConnection: 'psemea'
      useCustomVersion: true
      cliVersion: '$(jfrogCliVersion)'
      command: |
        jf rt u --flat=true "MyLib/greeting/**/*.nupkg" ps-nuget --module=dotnet --build-name $(JFROG_CLI_BUILD_NAME) --build-number $(Build.BuildNumber)
        jf rt bce $(JFROG_CLI_BUILD_NAME) $(Build.BuildNumber)
        jf rt bag $(JFROG_CLI_BUILD_NAME) $(Build.BuildNumber)
        jf rt bce $(JFROG_CLI_BUILD_NAME) $(Build.BuildNumber)
        jf rt bp  $(JFROG_CLI_BUILD_NAME) $(Build.BuildNumber)
    displayName: Publish lib and Build Info

- job: dotnet_webapi
  condition: eq(variables.RUN_JOB, true)
  variables:
    JFROG_CLI_BUILD_NAME: dotnet-webapi
    JFROG_CLI_BUILD_NUMBER: $(Build.BuildNumber)
    APP_VERSION: 1.0.0
    GENERIC_REPO: yann-generic
#  dependsOn:
#  - dotnet_lib
  steps: 
  - task: JfrogCliV2@1
    inputs:
      jfrogPlatformConnection: 'psemea'
      useCustomVersion: true
      cliVersion: '$(jfrogCliVersion)'
      command: |
        jf dotnetc --repo-resolve ps-nuget
        jf dotnet restore MyWebAPI/ --module=dotnet --build-name $(JFROG_CLI_BUILD_NAME) --build-number $(Build.BuildNumber)
    displayName: Pull dependencies 

  - task: DotNetCoreCLI@2
    inputs:
      command: build
      projects: MyWebAPI
      arguments: -c Release

  - task: JfrogCliV2@1
    inputs:
      jfrogPlatformConnection: 'psemea'
      useCustomVersion: true
      cliVersion: $(jfrogCliVersion)
      command: |
        jf dotnetc --repo-resolve ps-nuget
        jf rt dotnet publish -c Release MyWebAPI/ --module=dotnet --build-name $(JFROG_CLI_BUILD_NAME) --build-number $(Build.BuildNumber)
    displayName: Publish application

  - task: CmdLine@2
    inputs:
      script: |
        ls -l MyWebAPI/bin/Release/
        tar czvf webapi-$(APP_VERSION).tar.gz -C MyWebAPI/bin/Release/netcoreapp3.1/publish $(ls MyWebAPI/bin/Release/netcoreapp3.1/publish)
    displayName: Generate tarball

  - task: JfrogCliV2@1
    inputs:
      jfrogPlatformConnection: 'psemea'
      useCustomVersion: true
      cliVersion: '$(jfrogCliVersion)'
      command: |
        jf rt u webapi-$(APP_VERSION).tar.gz $(GENERIC_REPO)  --module=dotnet --build-name $(JFROG_CLI_BUILD_NAME) --build-number $(Build.BuildNumber)
        jf rt bce $(JFROG_CLI_BUILD_NAME) $(Build.BuildNumber)
        jf rt bag $(JFROG_CLI_BUILD_NAME) $(Build.BuildNumber)
        jf rt bp $(JFROG_CLI_BUILD_NAME) $(Build.BuildNumber)
    displayName: Publish application

- job: dotnet_docker
  condition: eq(variables.RUN_JOB, false)
  variables:
    JFROG_CLI_BUILD_NAME: dotnet-webapi
    JFROG_CLI_BUILD_NUMBER: $(Build.BuildNumber)
    APP_VERSION: 1.0.0
    GENERIC_REPO: yann-generic
  steps: 
  - task: JfrogCliV2@1
    inputs:
      jfrogPlatformConnection: 'psemea'
      useCustomVersion: true
      cliVersion: '$(jfrogCliVersion)'
      command: |
        jf rt dl $(GENERIC_REPO)/webapi-$(APP_VERSION).tar.gz CI/runtime/
    displayName: Fetch tarball
  - task: CmdLine@2
    inputs:
      script: |
        cd CI/runtime
        mkdir out
        tar -xzvf webapi-$(APP_VERSION).tar.gz -C out/
    displayName: Extract tarball
  - task: Docker@2
    inputs:
      containerRegistry: 'psemea-docker'
      repository: 'yann-docker/yann-webapi'
      command: 'buildAndPush'
      Dockerfile: 'CI/runtime/Dockerfile'