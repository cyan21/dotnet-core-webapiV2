pipelines:
  - name: app_dotnet
    configuration:
      environmentVariables:
        readOnly:
          runVarDockerRegistry: dark-docker.artifactory-eu-yannc4-0.soleng-emea-staging.jfrog.team:80
          runVarBaseImageTag: 3.1-jfrog
          runVarNugetRepo: dark-nuget
          runVarGenericRepo: dark-generic
          runVarGenericPromoteRepo: dark-rc-generic-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: dotnet
          runtime:
            type: host
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"${runVarDockerRegistry}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - sudo systemctl status docker
      - name: build_app_dotnet
        type: Bash
        configuration:
          affinityGroup: dotnet
          runtime:
            type: image
            image:
              custom:
                registry: artifactory_eu
                name: ${runVarDockerRegistry}/dotnet/core/sdk
                tag: ${runVarBaseImageTag}
                sourceRepository: ${runVarDockerRegistry}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: src_code_app_dotnet
          outputResources:
            - name: bi_app_dotnet
          integrations:
            - name: artifactory_eu
        execution:
          onStart:
            # below is a string substition : replacing the /artifactory in the integration url by /ui√í
            - export JFROG_CLI_BUILD_URL="${int_artifactory_eu_url/%artifactory/ui}/pipelines/myPipelines/app_dotnet/${run_number}/setup_env?branch=${res_src_code_app_dotnet_branchName}"
            - cd ${res_src_code_app_dotnet_resourcePath} && ls -l
            - echo $res_src_code_app_dotnet_branchName
            - git checkout ${res_src_code_app_dotnet_branchName}
            - dotnet nuget locals all --list 
            - dotnet nuget locals all --clear
            - cat MyWebAPI/MyWebAPI.csproj
            - appVersion=`sed -n "s/[[:space:]]*<Version>\(.*\)<\/Version>/\1/p" MyWebAPI/MyWebAPI.csproj`
            - echo $appVersion
            - jfrog rt dotnetc --server-id-resolve artifactory_eu --repo-resolve ${runVarNugetRepo}
            - ls -l .jfrog/projects && cat .jfrog/projects/dotnet.yaml
            - jfrog rt dotnet build MyWebAPI -c Release --build-name=${pipeline_name} --build-number=${run_number} --module=dependencies
            - jfrog rt dotnet publish -c Release MyWebAPI/
            - tar czvf webapi-${appVersion}.tar.gz -C MyWebAPI/bin/Release/netcoreapp3.1/publish $(ls MyWebAPI/bin/Release/netcoreapp3.1/publish)
            - jfrog rt u webapi-${appVersion}.tar.gz  ${runVarGenericRepo} --build-name=${pipeline_name} --build-number=${run_number} --module=result
            - jfrog rt bce ${pipeline_name} ${run_number}
            - jfrog rt bp ${pipeline_name} ${run_number}

      - name: scan_app_dotnet
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: bi_app_dotnet
              trigger: true

      - name: promote_nuget
        type: PromoteBuild
        configuration:
          targetRepository: ${runVarGenericPromoteRepo}
          includeDependencies: false
          status: Passed
          comment: Artifact passed Xray Scan
          copy: false
          inputSteps:
            - name: scan_app_dotnet
          inputResources:
            - name: bi_app_dotnet
          outputResources:
            - name: pb_app_dotnet
            - name: bi_app_dotnet_promoted_staging
