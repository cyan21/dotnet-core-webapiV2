template: true
valuesFilePath: values.yml  

resources:
  - name: {{ .Values.dotnetAppResources.gitRepo.name }}
    type: GitRepo
    configuration:
      gitProvider: {{ .Values.dotnetAppResources.gitRepo.gitProvider }}
      path: {{ .Values.dotnetAppResources.gitRepo.path }}
      branches:
        include: {{ .Values.dotnetAppResources.gitRepo.branches.include }}
      buildOn:
         commit: false

  - name: {{ .Values.dotnetAppResources.buildInfo.resourceName }}
    type: BuildInfo 
    configuration:
      sourceArtifactory: {{ .Values.dotnetProject.artifactoryIntegration }}
      buildName: {{ .Values.dotnetAppResources.buildInfo.name }} 
      buildNumber: ${run_number} 

  - name: {{ .Values.dotnetAppResources.buildInfoPromoted.resourceName }}
    type: BuildInfo 
    configuration:
      sourceArtifactory: {{ .Values.dotnetProject.artifactoryIntegration }}
      buildName: {{ .Values.dotnetAppResources.buildInfo.resourceName }}
      buildNumber: ${run_number} 

  - name: {{ .Values.dotnetAppResources.propertyBag.name }}
    type: PropertyBag
    configuration:
      biNumber: XXX

pipelines:
  - name: {{ .Values.dotnetProject.pipelineName }}
    # configuration:
    #   environmentVariables:
    #     readOnly:
    #       envVarDockerRepo: dark-docker
    #       envVarDockerRegistry: ${envVarDockerRepo}.artifactory-eu-yannc3-0.soleng-emea-staging.jfrog.team:80
    #       envVarBaseImageTag: 3.1-jfrog
    #       envVarNugetRepo: dark-nuget
    #       envVarGenericRepo: dark-generic
    #       envVarGenericPromoteRepo: dark-rc-generic-local
    steps:
      - name: setup_env
        type: Bash
        configuration:
          affinityGroup: dotnet
          runtime:
            type: host
        execution:
          onExecute:
            - sudo mkdir -p /etc/docker 
            - > 
              sudo jq -n  "{\"insecure-registries\": [\"{{ .Values.dotnetProject.container.registry }}\"]}" > /etc/docker/daemon.json
            - sudo systemctl restart docker
            - sudo cat /etc/docker/daemon.json
            - sudo systemctl status docker
      - name: {{ .Values.dotnetAppSteps.buildApp.name }}
        type: Bash
        configuration:
          affinityGroup: dotnet
          runtime:
            type: image
            image:
              custom:
                registry: {{ .Values.dotnetProject.artifactoryIntegration }}
                name: "{{ .Values.dotnetProject.container.registry }}/{{ .Values.dotnetProject.container.image }}"
                tag: {{ .Values.dotnetProject.container.tag }}
                sourceRepository: {{ .Values.dotnetProject.container.repoSource }}
          inputSteps:
            - name: setup_env
          inputResources:
            - name: {{ .Values.dotnetAppResources.gitRepo.name }}
          outputResources:
            - name: {{ .Values.dotnetAppResources.buildInfo.resourceName }}
          integrations:
            - name: {{ .Values.dotnetProject.artifactoryIntegration }}
        execution:
          onStart:
            # below is a string substition : replacing the /artifactory in the integration url by /ui√í
            - export JFROG_CLI_BUILD_URL="${int_{{ .Values.dotnetProject.artifactoryIntegration }}_url/%artifactory/ui}/pipelines/myPipelines/app_dotnet/${run_number}/setup_env?branch=${res_{{ .Values.dotnetAppResources.gitRepo.name }}_branchName}"
            - cd ${res_{{ .Values.dotnetAppResources.gitRepo.name }}_resourcePath} && ls -l
            - echo {{ .Values.dotnetAppResources.gitRepo.branches.include }}
            - git checkout {{ .Values.dotnetAppResources.gitRepo.branches.include }}
            - dotnet nuget locals all --list 
            - dotnet nuget locals all --clear
            - cat MyWebAPI/MyWebAPI.csproj
            - appVersion=`sed -n "s/[[:space:]]*<Version>\(.*\)<\/Version>/\1/p" MyWebAPI/MyWebAPI.csproj`
            - echo $appVersion
            - jfrog rt dotnetc --server-id-resolve {{ .Values.dotnetProject.artifactoryIntegration }} --repo-resolve {{ .Values.dotnetProject.nuget.repoSource }}
            - ls -l .jfrog/projects && cat .jfrog/projects/dotnet.yaml
            - jfrog rt dotnet build MyWebAPI -c Release --build-name={{ .Values.dotnetAppResources.buildInfo.name }} --build-number=${run_number} --module=dependencies
            - jfrog rt dotnet publish -c Release MyWebAPI/
            - tar czvf webapi-${appVersion}.tar.gz -C MyWebAPI/bin/Release/netcoreapp3.1/publish $(ls MyWebAPI/bin/Release/netcoreapp3.1/publish)
            - jfrog rt u webapi-${appVersion}.tar.gz  {{ .Values.dotnetProject.generic.repoSource }} --build-name={{ .Values.dotnetAppResources.buildInfo.name }} --build-number=${run_number} --module=result
            - jfrog rt bce {{ .Values.dotnetAppResources.buildInfo.name }} ${run_number}
            - jfrog rt bp {{ .Values.dotnetAppResources.buildInfo.name }} ${run_number}

      - name: {{ .Values.dotnetAppSteps.xray.name }}
        type: XrayScan
        configuration:
          failOnScan: false
          inputResources:
            - name: {{ .Values.dotnetAppResources.buildInfo.resourceName }}
              trigger: true

      - name: {{ .Values.dotnetAppSteps.promotion.name }}
        type: PromoteBuild
        configuration:
          targetRepository: {{ .Values.dotnetProject.generic.repoPromotion1 }}
          includeDependencies: {{ .Values.dotnetAppSteps.promotion.includeDependencies }}
          status: {{ .Values.dotnetAppSteps.promotion.status }}
          comment: {{ .Values.dotnetAppSteps.promotion.comment }}
          copy: {{ .Values.dotnetAppSteps.promotion.copy }}
          inputSteps:
            - name: {{ .Values.dotnetAppSteps.xray.name }}
          inputResources:
            - name: {{ .Values.dotnetAppResources.buildInfo.resourceName }}
          outputResources:
            - name: {{ .Values.dotnetAppResources.propertyBag.name }}
            - name: {{ .Values.dotnetAppResources.buildInfoPromoted.resourceName }}
