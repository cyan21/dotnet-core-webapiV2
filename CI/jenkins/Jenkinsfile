pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              hostAliases:
              - ip: "34.121.100.83"
                hostnames:
                - "urs-docker.platform-us.staging.gcp.devopsacc.team"
              containers:
              - name: dotnet
                image: mcr.microsoft.com/dotnet/core/sdk:3.1
                command:
                - cat
                tty: true
              - name: docker
                image: docker:20.10.6-dind
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            """.stripIndent()
        }
    }

    environment {
        // for docker build
        ARTY_CREDS=credentials('jenkins_rt')
        
        // for RT plugin : should match the ID just above
        ARTY_CREDS_ID='jenkins_rt'
        
        ART_ID='artifactory-eu'
        LIB_BUILD_NAME = 'jenkins-dotnet-lib'
        APP_BUILD_NAME = 'jenkins-dotnet-app'
        DOCKER_BUILD_NAME = 'jenkins-dotnet-docker'
        DOCKER_REGISTRY_URL=sh(returnStdout: true, script: "if [ \"params.DOCKER_SUB_DOMAIN\" == \"true\" ]; then echo \"${params.DOCKER_REPO}.${params.JPD_URL}\"; else echo \"${params.JPD_URL}/${params.DOCKER_REPO}\"; fi")
    }

    parameters {
        string(name: 'MY_GIT_URL', defaultValue: 'https://github.com/cyan21/dotnet-core-webapiV2', description: 'DO NOT ADD .git at the end')
        string(name: 'MY_GIT_BRANCH', defaultValue: 'master', description: '')

        string(name: 'JPD_URL', defaultValue: 'platform-us.staging.gcp.devopsacc.team', description: 'DO NOT ADD PROTOCOL')
        string(name: 'DOTNET_REPO', defaultValue: 'urs-dotnet', description: '')
        string(name: 'DOTNET_PROMOTE', defaultValue: 'urs-dotnet-release-local', description: '')

        string(name: 'GENERIC_REPO', defaultValue: 'urs-generic', description: '')
        string(name: 'GENERIC_PROMOTE', defaultValue: 'urs-generic-release-local', description: '')

        string(name: 'DOCKER_REPO', defaultValue: 'urs-docker', description: '')
        string(name: 'DOCKER_PROMOTE', defaultValue: 'urs-docker-release-local', description: '')
        booleanParam(name: 'DOCKER_SUB_DOMAIN', defaultValue: true, description: 'false means Docker Repo Path')

        string(name: 'APP_NAME', defaultValue: 'turtle', description: 'will be added as metadata on built artifacts as app.name')
        string(name: 'NEW_VERSION_LIB', defaultValue: '1.1.0', description: 'will update the nuge spec file')
        string(name: 'NEW_VERSION_APP', defaultValue: '1.1.0', description: 'will be added as metadata on built artifacts as app.name')

        booleanParam(name: 'DOTNET_BUILD_DEP', defaultValue: false, description: 'Build dependency')
        booleanParam(name: 'DOTNET_BUILD_APP', defaultValue: false, description: 'Build app')

        booleanParam(name: 'FAIL_BUILD', defaultValue: false, description: 'based on Xray scanning result')

        booleanParam(name: 'DOCKER_BUILD', defaultValue: false, description: 'Build docker')
        booleanParam(name: 'INDEX_BUILD', defaultValue: false, description: 'Should be used ONLY for the 1st run for XRAY to index a build ')

        string(name: 'ADM_USER', defaultValue: '', description: 'Only used if INDEX_BUILD is ticked')
        string(name: 'ADM_PASS', defaultValue: '', description: 'Only used if INDEX_BUILD is ticked')

        booleanParam(name: 'JPIPE_TRIGGER', defaultValue: false, description: '')
        string(name: 'JPIPE_URL', defaultValue: 'https://pipelines-api-us.staging.gcp.devopsacc.team/v1/projectIntegrations/36/hook', description: '')
        string(name: 'JPIPE_PASS', defaultValue: '***', description: '')

        string(name: 'MY_BUILD_NUMBER', defaultValue: '0', description: 'Only used if JPIPE_TRIGGER is ticked. If set to 0 will take the current run ID')
    }
    
    stages {

        stage ('Dotnet build dotnet package') {
            when {
                expression {
                    params.DOTNET_BUILD_DEP
                }
            }
            steps {
  
                container('dotnet') {
                    
                    git branch: params.MY_GIT_BRANCH , url: params.MY_GIT_URL

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: env.ARTY_CREDS_ID
                    )
    
                    rtDotnetResolver (
                        id: 'ART_RESOLVER',
                        serverId: env.ART_ID,
                        repo: params.DOTNET_REPO
                    )
    
                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*LIB_BUILD_NAME*', '*APP_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                        buildName: env.LIB_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    sh """
                        ls -l 

                        dotnet --version
                        apt update && apt install -y openjdk-11-jdk-headless
                        cat MyLib/greeting/greeting.csproj 
                        sed -i "s/<Version>[0-9.]*/<Version>\"${params.NEW_VERSION_LIB }\"/" MyLib/greeting/greeting.csproj 
                        cat MyLib/greeting/greeting.csproj 

                    """
                    
                    rtDotnetRun (
                        resolverId: "ART_RESOLVER",
                        args: "build MyLib/ -c Release",
                        module: 'myDeps',
                        apiProtocol: "v3",
                        buildName: env.LIB_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    rtUpload (
                        serverId: env.ART_ID,
                        module: 'mylib',
                        spec:
                            """{
                                "files": [
                                    {
                                        "pattern": "${env.WORKSPACE}/MyLib/greeting/bin/Release/Greeting.${params.NEW_VERSION_LIB}.nupkg",
                                        "target": "${params.DOTNET_REPO}/"
                                    }
                                ]
                            }""",
                        buildName: env.LIB_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: env.LIB_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    sh """#!/bin/bash
                        if [ ${params.INDEX_BUILD} == "true" ]; then
                            curl \
                                -XPOST \
                                -u "${ADM_USER}:${ADM_PASS}" \
                                -H "Content-Type: application/json" \
                                -d '{"names":["'${env.LIB_BUILD_NAME}'"]}' \
                            https://${params.JPD_URL}/xray/api/v1/binMgr/builds
                        else
                            echo "No indexing"
                        fi 
                    """
                } // end container
            } // end step
        } // end stage

        stage ('Xray scan for dotnet build info') {
            when {
                expression {
                    params.DOTNET_BUILD_DEP
                }
            }
            steps {
                xrayScan (
                    serverId: env.ART_ID,
                    buildName: env.LIB_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    failBuild: params.FAIL_BUILD 
                )

                sh """#!/bin/bash
                    # ugly workaround to see the scan result in the UI
                    if [ ${params.INDEX_BUILD} == "true" ]; then
                        curl \
                            -XPOST \
                            -u "${ADM_USER}:${ADM_PASS}" \
                            -H "Content-Type: application/json" \
                            -d '{"buildName": "'${env.LIB_BUILD_NAME}'", "buildNumber": "'${env.BUILD_NUMBER}'" }' \
                        https://${params.JPD_URL}/xray/api/v1/scanBuild
                    else
                        echo "No indexing"
                    fi
                """
            }
        }

        stage ('Dotnet build dotnet app') {
            when {
                expression {
                    params.DOTNET_BUILD_APP
                }
            }
            steps {
  
                container('dotnet') {
                    
                    git branch: params.MY_GIT_BRANCH , url: params.MY_GIT_URL

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: env.ARTY_CREDS_ID
                    )
    
                    rtDotnetResolver (
                        id: 'ART_RESOLVER',
                        serverId: env.ART_ID,
                        repo: params.DOTNET_REPO
                    )
    
                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*LIB_BUILD_NAME*', '*APP_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                        buildName: env.APP_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    sh """
                        dotnet --version
                        apt update && apt install -y openjdk-11-jdk-headless
                        echo '${params.NEW_VERSION_LIB}'
                        cat MyWebAPI/MyWebAPI.csproj

                        sed -i 's/Greeting" Version="[0-9.]*"/Greeting" Version="${params.NEW_VERSION_LIB}"/' MyWebAPI/MyWebAPI.csproj
                        cat MyWebAPI/MyWebAPI.csproj
                    """
                    
                    rtDotnetRun (
                        resolverId: "ART_RESOLVER",
                        args: "publish MyWebAPI/ -o out -c Release",
                        module: 'myDeps',
                        buildName: env.APP_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    sh"""
                        ls -l
                        mv MyWebAPI/bin/Release/netcoreapp3.1/MyWebAPI.dll out/
                        ls -l out
                        tar czvf webapi-${params.NEW_VERSION_APP}.tar.gz -C out \$(ls out/)
                        tar tvf webapi-${params.NEW_VERSION_APP}.tar.gz
                    """

                    rtUpload (
                        serverId: env.ART_ID,
                        module: 'myapp',
                        spec:
                            """{
                                "files": [
                                    {
                                        "pattern": "${env.WORKSPACE}/webapi-${params.NEW_VERSION_APP}.tar.gz",
                                        "target": "${params.GENERIC_REPO}/"
                                    }
                                ]
                            }""",
                        buildName: env.APP_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    rtSetProps (
                        serverId: env.ART_ID,
                        spec: """{
                                \"files\": [
                                {
                                    \"aql\": {
                                        \"items.find\": {
                                            \"repo\":\"${params.GENERIC_REPO}\",
                                            \"@build.name\": \"${env.APP_BUILD_NAME}\",
                                            \"@build.number\": \"${env.BUILD_NUMBER}\"
                                        }
                                    }                          
                                }
                                ]
                        }""",
                        props: "app.name=${params.APP_NAME};app.version=${params.NEW_VERSION_APP}"
                    )
                    
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: env.APP_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    sh """#!/bin/bash
                        if [ ${params.INDEX_BUILD} == "true" ]; then
                            curl \
                                -XPOST \
                                -u "${ADM_USER}:${ADM_PASS}" \
                                -H "Content-Type: application/json" \
                                -d '{"names":["'${env.APP_BUILD_NAME}'"]}' \
                            https://${params.JPD_URL}/xray/api/v1/binMgr/builds
                        else
                            echo "No indexing"
                        fi
                    """
                } // end container
            } // end step
        } // end stage
      
        stage ('Xray scan for dotnet app') {
            when {
                expression {
                    params.DOTNET_BUILD_APP
                }
            }
            steps {

                xrayScan (
                    serverId: env.ART_ID,
                    buildName: env.APP_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    failBuild: params.FAIL_BUILD 
                )
                sh """#!/bin/bash
                    # ugly workaround to see the scan result in the UI
                    if [ ${params.INDEX_BUILD} == "true" ]; then
                        curl \
                            -XPOST \
                            -u "${ADM_USER}:${ADM_PASS}" \
                            -H "Content-Type: application/json" \
                            -d '{"buildName": "'${env.APP_BUILD_NAME}'", "buildNumber": "'${env.BUILD_NUMBER}'" }' \
                        https://${params.JPD_URL}/xray/api/v1/scanBuild
                    else
                        echo "No indexing"
                    fi
                """
            }
        }
        
        stage ('Build Promotion for lib and app') {
            when {
                expression {
                    params.DOTNET_BUILD_APP
                }
            }
            steps {
                // promote lib
/*              // DOESN'T WORK IF RUN ONLY THE BUILD APP STAGES AS NO BUILD NUMBER FOR LIB
                rtPromote (
                    serverId: env.ART_ID,
                    targetRepo: params.DOTNET_PROMOTE,
                    buildName: env.LIB_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    
                    comment: 'passed Xray scan',
                    status: 'XRAY_OK',
                    includeDependencies: true,
                    failFast: true,
                    copy: false
                )
*/                
                // promote app
                rtPromote (
                    serverId: env.ART_ID,
                    targetRepo: params.GENERIC_PROMOTE,
                    buildName: env.APP_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    
                    comment: 'passed Xray scan',
                    status: 'XRAY_OK',
                    includeDependencies: false,
                    copy: false,
                    failFast: false
                )
            }
        } // end stage
        


        stage ('Docker Build & Push') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                container('docker') {

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: env.ARTY_CREDS_ID
                    )

                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*APP_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    rtDownload (
                        serverId: env.ART_ID,
                        spec: """{
                              "files": [
                                {
                                  \"pattern": \"${params.GENERIC_REPO}/webapi-${params.NEW_VERSION_APP}.tar.gz\",
                                  \"target": \"webapi.tar.gz\"                                  
                                }
                              ]
                        }""",
                        failNoOp: true,
                        module: 'webapp',
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    sh """
                        ls -l
                        rm -rf out
                        mkdir out
                        docker images
                        apk add curl openjdk11
                        git_path=`echo ${params.MY_GIT_URL} | cut -d/ -f4,5`
                        echo \${git_path}
                        curl -O https://raw.githubusercontent.com/\${git_path}/${params.MY_GIT_BRANCH}/CI/runtime/Dockerfile
                        tar -xzvf webapi.tar.gz -C out/

                        docker login -u ${ARTY_CREDS_USR} -p ${ARTY_CREDS_PSW} ${env.DOCKER_REGISTRY_URL}
                        docker build --network=host -t ${env.DOCKER_REGISTRY_URL}/jenkins-dotnetapp:${params.NEW_VERSION_APP} .
                    """
                
                    rtDockerPush(
                        serverId: env.ART_ID,
                        image: "${env.DOCKER_REGISTRY_URL}/jenkins-dotnetapp:${params.NEW_VERSION_APP}",
                        targetRepo: params.DOCKER_REPO,
                        properties: "app.name=${params.APP_NAME};app.version=${params.NEW_VERSION_APP}",
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
 
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    sh """
                        if [ ${params.INDEX_BUILD} == "true" ]; then
                            curl \
                                -XPOST \
                                -u "${ADM_USER}:${ADM_PASS}" \
                                -H "Content-Type: application/json" \
                                -d '{"names":["'${env.DOCKER_BUILD_NAME}'"]}' \
                            https://${params.JPD_URL}/xray/api/v1/binMgr/builds
                        else
                            echo "No indexing"
                        fi
                    """
                }
            } // end steps
        } // end stage

        stage ('Xray scan for Docker Build') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                xrayScan (
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,
                    failBuild: params.FAIL_BUILD 
                )
                sh """#!/bin/bash
                    # ugly workaround to see the scan result in the UI
                    if [ ${params.INDEX_BUILD} == "true" ]; then
                        curl \
                            -XPOST \
                            -u "${ADM_USER}:${ADM_PASS}" \
                            -H "Content-Type: application/json" \
                            -d '{"buildName": "'${env.DOCKER_BUILD_NAME}'", "buildNumber": "'${env.BUILD_NUMBER}'" }' \
                        https://${params.JPD_URL}/xray/api/v1/scanBuild
                    else
                        echo "No indexing"
                    fi
                """
            }
        }
        
        stage ('Build promotion for Docker Build') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                rtPromote (
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,

                    targetRepo: params.DOCKER_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: false,
                    copy: false,
                    failFast: false
                )               
            }
        } // en stage

        stage ('Trigger JFrog Pipelines') {
            when {
                expression {
                    params.JPIPE_TRIGGER
                }
            }        
            steps {
                
                sh """#!/bin/sh
                    bNumber=${params.MY_BUILD_NUMBER} 
                    if [ \$bNumber = "0" ]; then bNumber=${env.BUILD_NUMBER}; fi
                    echo \$bNumber

                    curl \
                        -XPOST \
                        -H "authorization: ${params.JPIPE_PASS}" \
                        -H "Content-Type: application/json" \
                        -d '{"DockerBuildName": "'${env.DOCKER_BUILD_NAME}'", "buildNumber": "'\${bNumber}'", "appName": "'${params.APP_NAME}'", "appVersion":"'${params.NEW_VERSION_APP}'"}' \
                    "${params.JPIPE_URL}"
                """
            }
        }  
    } // end stages
}
